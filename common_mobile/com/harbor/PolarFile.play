/**
 * Created by pepusz on 15. 02. 12..
 */
package com.harbor {
import com.common.AppProperties;
//import com.loggers.DataLogger;

//import flash.data.SQLStatement;
import flash.events.Event;
import flash.events.HTTPStatusEvent;
import flash.events.IOErrorEvent;
//import flash.events.SQLErrorEvent;
//import flash.events.SQLEvent;
import flash.events.SecurityErrorEvent;
import flash.filesystem.File;
//import flash.filesystem.FileMode;
//import flash.filesystem.FileStream;
import flash.net.URLLoader;
import flash.net.URLRequest;
import flash.net.URLRequestMethod;

import starling.events.EventDispatcher;

public class PolarFile extends EventDispatcher {
    public var id:String;
    public var name:String;
    public var filePath:String;
    public var createdAt:Date;
    public var updatedAt:Date;
    private var _downloadPolarStatus:int;
    private var _polarName:String;
    private var _polarExtension:String;
    private var isSaved:Boolean = false;

    public static function parseJson(obj:Object):PolarFile {
        var pDao:PolarFile = new PolarFile();
        pDao.id = obj.id;
        pDao.name = obj.name;
        pDao.createdAt = new Date();
        pDao.updatedAt = new Date();
        return pDao;
    }

    public static function parseSql(obj:Object):PolarFile {
        var pDao:PolarFile = new PolarFile();
        pDao.id = obj.remote_id;
        pDao.name = obj.name;
        pDao.createdAt = new Date();
        pDao.updatedAt = new Date();
        pDao.filePath = obj.path;
        if (!pDao.hasFile()) {
            CloudHandler.instance.addPolarToDownloadQueue(pDao);
        } else {
            pDao.dispatchFileReady();
        }
        return pDao;
    }

    public function dispatchFileReady():void {
        dispatchEvent(new PolarFileEvent());
    }

    public function hasFile():Boolean {
        return !(this.filePath == "" || this.filePath == null);
    }

    public function deletePolar():void {
        var deletePolarRequest:URLRequest = new URLRequest(CloudHandler.instance.serverEndpoint + "destroy_polar?id=" + this.id);
        deletePolarRequest.method = URLRequestMethod.DELETE;
        deletePolarRequest.requestHeaders = CloudHandler.instance.headers;

        var loader:URLLoader = new URLLoader();
        loader.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, onDeletePolarStatus, false, 0, true);
        loader.addEventListener(Event.COMPLETE, onDeletePolarComplete, false, 0, true);
        loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onDeletePolarError, false, 0, true);
        loader.addEventListener(IOErrorEvent.IO_ERROR, onDeletePolarError, false, 0, true);
        loader.load(deletePolarRequest);
    }

    private function onDeletePolarStatus(e:HTTPStatusEvent):void {
        if (e.status == 200) {
            CloudHandler.instance.getPolars();
        }
    }

    private function onDeletePolarComplete(e:Event):void {
        var loader:URLLoader = URLLoader(e.target);
        loader.removeEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, onDeletePolarStatus);
        loader.removeEventListener(Event.COMPLETE, onDeletePolarComplete);
        loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onDeletePolarError);
        loader.removeEventListener(IOErrorEvent.IO_ERROR, onDeletePolarError);
    }

    private function onDeletePolarError(e:Event):void {
        var loader:URLLoader = URLLoader(e.target);
        loader.removeEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, onDeletePolarStatus);
        loader.removeEventListener(Event.COMPLETE, onDeletePolarComplete);
        loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onDeletePolarError);
        loader.removeEventListener(IOErrorEvent.IO_ERROR, onDeletePolarError);
    }

    public function downloadPolar():void {
        var downloadPolarRequest:URLRequest = new URLRequest(CloudHandler.instance.serverEndpoint + "download_polar?id=" + id);
        downloadPolarRequest.requestHeaders = CloudHandler.instance.headers;

        var loader:URLLoader = new URLLoader();
        loader.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, onDownloadPolarStatus);
        loader.addEventListener(Event.COMPLETE, onDownloadPolarComplete);
        loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onDownloadPolarError);
        loader.addEventListener(IOErrorEvent.IO_ERROR, onDownloadPolarError);
        loader.load(downloadPolarRequest);
    }

    private function onDownloadPolarStatus(e:HTTPStatusEvent):void {
        _downloadPolarStatus = e.status;
        if (_downloadPolarStatus == 200) {
            var length:int = e.responseHeaders.length;
            var i:int = 0;
            while (i < length) {
                if (e.responseHeaders[i].name == "Content-Disposition") {
                    var name:String = e.responseHeaders[i].value.split("=")[1];
                    var parts:Array = name.substring(1, name.length - 1).split(".");
                    _polarName = parts[0];
                    _polarExtension = parts[1];
                    break;
                }
                i++;
            }
        }
    }

    private function onDownloadPolarComplete(e:Event):void {
        var loader:URLLoader = URLLoader(e.target);
        loader.removeEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, onDownloadPolarStatus);
        loader.removeEventListener(Event.COMPLETE, onDownloadPolarComplete);
        loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onDownloadPolarError);
        loader.removeEventListener(IOErrorEvent.IO_ERROR, onDownloadPolarError);

        if (_downloadPolarStatus == 200) {
            var file:File = File.applicationStorageDirectory.resolvePath("polars/" + id + "." + ((_polarExtension != null) ? _polarExtension : "csv"));
            filePath = file.nativePath;
            updatePath();
            var stream:FileStream = new FileStream();
            stream.open(file, FileMode.WRITE);
            stream.writeUTFBytes(loader.data);
            stream.close();
            sendPolarDownloaded();
        }
    }

    public function getFile():File {
        if (AppProperties.isIOS) {
            return File.applicationStorageDirectory.resolvePath("polars/" + id + "." + ((_polarExtension != null) ? _polarExtension : "csv"));
        } else {
            return new File(this.filePath);
        }

    }

    private function onDownloadPolarError(e:Event):void {
        var loader:URLLoader = URLLoader(e.target);
        loader.removeEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, onDownloadPolarStatus);
        loader.removeEventListener(Event.COMPLETE, onDownloadPolarComplete);
        loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onDownloadPolarError);
        loader.removeEventListener(IOErrorEvent.IO_ERROR, onDownloadPolarError);
    }

    private function sendPolarDownloaded():void {
        var polarDownloadedRequest:URLRequest = new URLRequest(CloudHandler.instance.serverEndpoint + "polar_downloaded?id=" + id);
        polarDownloadedRequest.requestHeaders = CloudHandler.instance.headers;
        var loader:URLLoader = new URLLoader();
        loader.addEventListener(HTTPStatusEvent.HTTP_RESPONSE_STATUS, polarDownloaded_completeHandler);
        loader.load(polarDownloadedRequest);
    }

    private function polarDownloaded_completeHandler(e:HTTPStatusEvent):void {
        CloudHandler.instance.finishDownload();
        dispatchFileReady();
    }

    private function onPolarDownloadedError(e:Event):void {
        var loader:URLLoader = URLLoader(e.target);
        loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onPolarDownloadedError);
        loader.removeEventListener(IOErrorEvent.IO_ERROR, onPolarDownloadedError);
    }


    public function saveToDb():void {
       // if (!PolarFileHandler.instance.dbReady) {
       //     trace("DB not ready");
       //     return;
       // }
	   //
       // var insertStatement:SQLStatement = new SQLStatement();
       // insertStatement.sqlConnection = PolarFileHandler.instance.sqlConnection;
       // insertStatement.addEventListener(SQLEvent.RESULT, insertStatement_resultHandler, false, 0, true);
       // insertStatement.addEventListener(SQLErrorEvent.ERROR, insertStatement_errorHandler, false, 0, true);
       // var sql:String = "INSERT INTO polars (remote_id, name, created_at, updated_at, path) VALUES (" +
       //         "'" + this.id + "', " +
       //         "'" + this.name + "', " +
       //         "strftime('%J','" + DataLogger.toSqlDate(this.createdAt) + "'), " +
       //         "strftime('%J','" + DataLogger.toSqlDate(this.updatedAt) + "'), " +
       //         "''); ";
       // insertStatement.text = sql;
       // insertStatement.execute();
    }

   // private function insertStatement_resultHandler(e:SQLEvent):void {
   //     CloudHandler.instance.addPolarToDownloadQueue(this);
   //     isSaved = true;
   //     var statement:SQLStatement = e.currentTarget as SQLStatement;
   //     statement.removeEventListener(SQLEvent.RESULT, insertStatement_resultHandler);
   //     statement.removeEventListener(SQLErrorEvent.ERROR, insertStatement_errorHandler);
   //
   // }
   //
   // private function insertStatement_errorHandler(e:SQLErrorEvent):void {
   //     isSaved = false;
   //     var statement:SQLStatement = e.currentTarget as SQLStatement;
   //     statement.removeEventListener(SQLEvent.RESULT, insertStatement_resultHandler);
   //     statement.removeEventListener(SQLErrorEvent.ERROR, insertStatement_errorHandler);
   // }


    public function updatePath():void {
      //  if (!PolarFileHandler.instance.dbReady) {
      //      trace("DB not ready");
      //      return;
      //  }
      //  var statement:SQLStatement = new SQLStatement();
      //  statement.sqlConnection = PolarFileHandler.instance.sqlConnection;
      //  statement.addEventListener(SQLEvent.RESULT, updateResult, false, 0, true);
      //  statement.addEventListener(SQLErrorEvent.ERROR, updateStatement_errorHandler, false, 0, true);
      //  var sql:String = "UPDATE polars SET path='" + filePath + "' WHERE remote_id='" + id + "';";
      //  statement.text = sql;
      //  statement.execute();
    }


  //  private function updateResult(e:SQLEvent):void {
  //      trace("update success");
  //  }
  //
  //  private function updateStatement_errorHandler(e:SQLErrorEvent):void {
  //      trace("update failed");
  //  }


}
}
