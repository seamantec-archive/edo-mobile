package com.sailing {
import com.sailing.SailData;
import com.sailing.datas.Apb;
import com.sailing.datas.ApparentWind;
import com.sailing.datas.BaseSailData;
import com.sailing.datas.Bwc;
import com.sailing.datas.CrossTrack;
import com.sailing.datas.Dbt;
import com.sailing.datas.Dpt;
import com.sailing.datas.Eta;
import com.sailing.datas.Gga;
import com.sailing.datas.Gll;
import com.sailing.datas.Gsa;
import com.sailing.datas.Gsv;
import com.sailing.datas.Hcc;
import com.sailing.datas.Hcd;
import com.sailing.datas.Hdg;
import com.sailing.datas.Hdm;
import com.sailing.datas.Hdt;
import com.sailing.datas.Heading;
import com.sailing.datas.Hsc;
import com.sailing.datas.Htc;
import com.sailing.datas.Hvm;
import com.sailing.datas.Mda;
import com.sailing.datas.Mhu;
import com.sailing.datas.Mmb;
import com.sailing.datas.Mta;
import com.sailing.datas.Mtw;
import com.sailing.datas.Mwd;
import com.sailing.datas.Mwv;
import com.sailing.datas.MwvR;
import com.sailing.datas.MwvT;
import com.sailing.datas.OffCourse;
import com.sailing.datas.Performance;
import com.sailing.datas.PositionAndSpeed;
import com.sailing.datas.Rmb;
import com.sailing.datas.Rmc;
import com.sailing.datas.Rotnmea;
import com.sailing.datas.Rsa;
import com.sailing.datas.Setanddrift;
import com.sailing.datas.TripData;
import com.sailing.datas.TrueWindC;
import com.sailing.datas.Vdr;
import com.sailing.datas.Vhw;
import com.sailing.datas.Vlw;
import com.sailing.datas.Vmg;
import com.sailing.datas.VmgWaypoint;
import com.sailing.datas.VmgWind;
import com.sailing.datas.Vpw;
import com.sailing.datas.Vtg;
import com.sailing.datas.Vwr;
import com.sailing.datas.Vwt;
import com.sailing.datas.WaterDepth;
import com.sailing.datas.Wdc;
import com.sailing.datas.Windsmoothapp;
import com.sailing.datas.Windsmoothtrue;
import com.sailing.datas.Xte;
import com.sailing.datas.Zda;
import com.sailing.datas.Zlz;
import com.sailing.datas.Zzu;
import com.sailing.units.Unit;
import com.utils.ObjectUtils;

import flash.utils.getTimer;

public class SailData {

    private static var _actualSailData:SailData;
    private static var _demoSailData:SailData;

    private var _sailDataTimestamp:Number;
   
    public var apb:Apb = new Apb();
    public var bwc:Bwc = new Bwc();
    public var dbt:Dbt = new Dbt();
    public var dpt:Dpt = new Dpt();
    public var eta:Eta = new Eta();
    public var gga:Gga = new Gga();
    public var gll:Gll = new Gll();
    public var gsa:Gsa = new Gsa();
    public var gsv:Gsv = new Gsv();
    public var hdg:Hdg = new Hdg();
    public var hdt:Hdt = new Hdt();
    public var hsc:Hsc = new Hsc();
    public var mtw:Mtw = new Mtw();
    public var mwd:Mwd = new Mwd();
    public var mwv:Mwv = new Mwv();
    public var rmb:Rmb = new Rmb();
    public var rmc:Rmc = new Rmc();
    public var rotnmea:Rotnmea = new Rotnmea();
    public var rsa:Rsa = new Rsa();
    public var vdr:Vdr = new Vdr();
    public var vhw:Vhw = new Vhw();
    public var vlw:Vlw = new Vlw();
    public var vpw:Vpw = new Vpw();
    public var vtg:Vtg = new Vtg();
    public var xte:Xte = new Xte();
    public var zda:Zda = new Zda();
    public var hcc:Hcc = new Hcc();
    public var hcd:Hcd = new Hcd();
    public var hdm:Hdm = new Hdm();
    public var htc:Htc = new Htc();
    public var hvm:Hvm = new Hvm();
    public var mda:Mda = new Mda();
    public var mhu:Mhu = new Mhu();
    public var mmb:Mmb = new Mmb();
    public var mta:Mta = new Mta();
    public var vwr:Vwr = new Vwr();
    public var vwt:Vwt = new Vwt();
    public var wdc:Wdc = new Wdc();
    public var zlz:Zlz = new Zlz();
    public var zzu:Zzu = new Zzu();

    public var vmg:Vmg = new Vmg();
    public var vmgwind:VmgWind = new VmgWind();
    public var vmgwaypoint:VmgWaypoint = new VmgWaypoint();
    public var mwvt:MwvT = new MwvT();
    public var mwvr:MwvR = new MwvR();
    public var windsmoothtrue:Windsmoothtrue = new Windsmoothtrue();
    public var windsmoothapp:Windsmoothapp = new Windsmoothapp();
    public var setanddrift:Setanddrift = new Setanddrift();
    public var positionandspeed:PositionAndSpeed = new PositionAndSpeed();
    public var crosstrack:CrossTrack = new CrossTrack();
    public var heading:Heading = new Heading();
    public var truewindc:TrueWindC = new TrueWindC();
    public var apparentwind:ApparentWind = new ApparentWind();
    public var waterdepth:WaterDepth = new WaterDepth();
    public var offcourse:OffCourse = new OffCourse();
    public var performance:Performance = new Performance();

    public static var cog:Number = 0;
    public static var windDirectionTrue:Number = 0;
    public static var waypointBearing:Number = 0;
    public static var ownProperties:Array = ObjectUtils.getProperties(actualSailData);

    public static function get actualSailData():SailData {
        if (_actualSailData === null) {
            _actualSailData = new SailData();
        }
        return _actualSailData;
    }


    public static function set actualSailData(value:SailData):void {
        _actualSailData = value;
    }


    public function get sailDataTimestamp():Number {
        return _sailDataTimestamp;
    }


    public function set sailDataTimestamp(value:Number):void {
        _sailDataTimestamp = value;
    }

    public static function get demoSailData():SailData {
        var length:int = ownProperties.length;

        if(_demoSailData==null) {
            _demoSailData = new SailData();

            var properties:Array;
            var item:Object;
            for(var i:int=0; i<length; i++) {
                //properties = ObjectUtils.getProperties(_demoSailData[ownProperties[i]]);
                for(var j:int=0; j<properties.length; j++) {
                  //  item = _demoSailData[ownProperties[i]][properties[j]];
                    if(item is Unit) {
                        (item as Unit).value = (Math.random()*((item as Unit).getAlarmMax() - (item as Unit).getAlarmMin())) + (item as Unit).getAlarmMin();
                    }
                }
            }
        }

        for(var i:int=0; i<length; i++) {
            //(_demoSailData[ownProperties[i]] as BaseSailData).lastTimestamp = getTimer();
        }
        _demoSailData.sailDataTimestamp = getTimer();

        return _demoSailData;
    }


}


}
