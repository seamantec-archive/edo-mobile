package components.instruments{import com.dynamicInstruments.DynamicSprite;import com.dynamicInstruments.InstrumentQuadBatcher;import com.sailing.ForgatHandler;import com.utils.Assets;import com.sailing.SailData;import com.sailing.Splitter;import com.sailing.instruments.BaseInstrument;import com.sailing.minMax.MinMax;import com.utils.Blinker;import com.utils.SaveHandler;import starling.display.Image;import starling.events.TouchEvent;import starling.textures.Texture;import starling.utils.HAlign;import starling.utils.VAlign;import starling.utils.deg2rad;public class Rudder extends BaseInstrument {    public var actualState:String = "";    private var forgatHandler:ForgatHandler;    private var _huszak:Array = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];	private var _piros:uint;	private var _zold:uint;	private var _feher:uint;    private var _absz:Number;    private var _grafHeight:Number;    private var analogBackground:DynamicSprite;    private var analogBackgroundBatch:InstrumentQuadBatcher;    private var analog:DynamicSprite;    private var center:DynamicSprite;    private var centerBatch:InstrumentQuadBatcher;    private var analogi:DynamicSprite;    private var jobb:Image;    private var bal:Image;    private var digitalBackgroundBatch:InstrumentQuadBatcher;    private var digitalBackground:DynamicSprite;    private var digital:DynamicSprite;    private var graf:DynamicSprite;			public function Rudder() {        super(Assets.getInstrument("rudder"));        minMaxVars["rsa.rudderSensorStarboard"] = new MinMax(undefined, undefined, this);        forgatHandler = new ForgatHandler(analog["mutato"], this, { offsetToZero: -170, min: 10, max: 350, blinker: true });        setAnalog();        this.addEventListener(TouchEvent.TOUCH, digitalis);        _piros = 0xff0000;        _zold = 0x00ff00;        _feher = 0x999999;        setRsaInvalid();    }    protected override function buildComponents():void {        var basic:Texture = Assets.getAtlas("basic_common");        var rudder:Texture = Assets.getAtlas("rudder");        analogBackground = _instrumentAtlas.getComponentAsDynamicSprite(rudder, "analog.instance2");        bal = _instrumentAtlas.getComponentAsImageWithParent(rudder, "analog.bal", analogBackground);        jobb = _instrumentAtlas.getComponentAsImageWithParent(rudder, "analog.jobb", analogBackground);        analog = new DynamicSprite();        _instrumentAtlas.getComponentAsImageWithParent(basic, "analog.min", analog);        _instrumentAtlas.getComponentAsImageWithParent(basic, "analog.max", analog);        _instrumentAtlas.getComponentAsImageWithParent(basic, "analog.mutato", analog);        center = new DynamicSprite();        _instrumentAtlas.getComponentAsImageWithParent(basic, "analog.instance10", center);        _instrumentAtlas.getComponentAsImageWithParent(basic, "analog.instance8", center);        analogi = new DynamicSprite();        _instrumentAtlas.getTextFieldComponentWithParent(basic, "analog.digi", analogi, center);        analogBackgroundBatch = new InstrumentQuadBatcher();        analogBackgroundBatch.addDisplayObject(analogBackground);        this.addChild(analogBackgroundBatch.quadBatch);        this.addChild(analog);        centerBatch = new InstrumentQuadBatcher(analogBackground.width,analogBackground.height);        centerBatch.addDisplayObject(center);        this.addChild(centerBatch.quadBatch);        this.addChild(analogi);        digitalBackground = _instrumentAtlas.getComponentAsDynamicSprite(rudder, "digital.instance11");        digital = new DynamicSprite();        _instrumentAtlas.getTextFieldComponentWithParent(basic, "digital.digi", digital, digitalBackground);        _instrumentAtlas.getTextFieldComponentWithParent(basic, "digital.digimin", digital, digitalBackground, VAlign.CENTER,HAlign.RIGHT, 1, 0xffeea3);        _instrumentAtlas.getTextFieldComponentWithParent(basic, "digital.digimax", digital, digitalBackground, VAlign.CENTER,HAlign.RIGHT, 1, 0xffeea3);        graf = _instrumentAtlas.getComponentAsDynamicSprite(rudder, "digital.graf", false, false);        _instrumentAtlas.getComponentAsImageWithParent(rudder, "digital.graf.instance15", graf);        _instrumentAtlas.getComponentAsTextFieldWithParent("digital.graf.LocalMAX", graf);        _instrumentAtlas.getComponentAsTextFieldWithParent("digital.graf.LocalMIN", graf);        for(var i:int=1; i<=20; i++) {            _instrumentAtlas.getComponentAsImageWithParent(basic, "digital.graf.g" + i, graf);            _instrumentAtlas.getComponentAsImageWithParent(basic, "digital.graf.r" + i, graf);            graf["r" + i].rotation = Math.PI;        }        _grafHeight = graf["g1"].height;        digitalBackgroundBatch = new InstrumentQuadBatcher();        digitalBackgroundBatch.addDisplayObject(digitalBackground);        this.addChild(digitalBackgroundBatch.quadBatch);        digital.addChild(graf);        this.addChild(digital);    }    private function setAnalog():void {        analogBackgroundBatch.quadBatch.visible = true;        analog.visible = true;        centerBatch.quadBatch.visible = true;        analogi.visible = true;        digitalBackgroundBatch.quadBatch.visible = false;        digital.visible = false;    }    private function setDigital():void {        analogBackgroundBatch.quadBatch.visible = false;        analog.visible = false;        centerBatch.quadBatch.visible = false;        analogi.visible = false;        digitalBackgroundBatch.quadBatch.visible = true;        digital.visible = true;    }	private function digitalis(e:TouchEvent):void {        if (touchIsEnd(e)) {            if (analog.visible) {                setDigital();                actualState = "digital";            } else {                setAnalog();                actualState = "analog";            }            SaveHandler.instance.setState(_id, actualState);        }	}				private function setState(value:String):void {        actualState = value;        if (value == "digital") {            setDigital();        } else if (value == "analog") {            setAnalog();        }	}			public override function updateState(stateType:String):void {	    setState(stateType);	}	public override function updateDatas(datas:SailData, needTween:Boolean = true):void {        if(datas!=null && datas.rsa.isValid()) {            removeRsaBlinker();            analog["mutato"].visible = true;            if(!isNaN((minMaxVars["rsa.rudderSensorStarboard"] as MinMax).min)) {                analog["min"].visible = true;            }            if(!isNaN((minMaxVars["rsa.rudderSensorStarboard"] as MinMax).max)) {                analog["max"].visible = true;            }            var value:Number = datas.rsa.rudderSensorStarboard;            if(value > 0) {                if(bal.color!=_feher || jobb.color!=_zold) {                    bal.color = _feher;                    jobb.color = _zold;                    analogBackgroundBatch.render();                }            } else if (value < 0) {                if(bal.color!=_piros || jobb.color!=_feher) {                    bal.color = _piros;                    jobb.color = _feher;                    analogBackgroundBatch.render();                }            } else {                if(bal.color!=_feher || jobb.color!=_feher) {                    bal.color = _feher;                    jobb.color = _feher;                    analogBackgroundBatch.render();                }            }            forgatHandler.forgat((forgatHandler.offsetToZero*(-1)) - (value*2.7), { needTween: needTween });            analogi["digi"]["digi_a"].text = Splitter.withValue(value).a3;            digital["digi"]["digi_a"].text = Splitter.instance.a3;            graf.visible = true;            _huszak.shift();            _huszak.push(value);            for (var i:int=0; i<=19; i++) {                _absz = Math.abs(_huszak[i])*_grafHeight/40;                if(_huszak[i] <= 0) {                    graf["g"+(20-i)].height = _absz;                    graf["r"+(20-i)].height = 0;                } else {                    graf["g"+(20-i)].height = 0;                    graf["r"+(20-i)].height = _absz;                }                if(_huszak[i] < -40) {                    graf["g"+(20-i)].height = _grafHeight;                } else if (_huszak[i] > 40) {                    graf["r"+(20-i)].height = _grafHeight;                }            }            graf["LocalMAX"].text = "40";            graf["LocalMIN"].text = "-40";        }    }			public override function minMaxChanged():void {        var min:Number = (minMaxVars["rsa.rudderSensorStarboard"] as MinMax).min;        var max:Number = (minMaxVars["rsa.rudderSensorStarboard"] as MinMax).max;        if(!isNaN(min) && !isNaN(max)) {            digital["digimin"]["digi_a"].text = Splitter.withValue(min).a3;            digital["digimax"]["digi_a"].text = Splitter.withValue(max).a3;            min *= -2.7;            if(min<forgatHandler.offsetToZero) {                analog["min"].rotation = deg2rad(forgatHandler.offsetToZero);            } else if(min>(forgatHandler.offsetToZero*(-1))) {                analog["min"].rotation = deg2rad(forgatHandler.offsetToZero*(-1));            } else {                analog["min"].rotation = deg2rad(min);            }            max *= -2.7;            if(max<forgatHandler.offsetToZero) {                analog["max"].rotation = deg2rad(forgatHandler.offsetToZero);            } else if(max>(forgatHandler.offsetToZero*(-1))) {                analog["max"].rotation = deg2rad(forgatHandler.offsetToZero*(-1));            } else {                analog["max"].rotation = deg2rad(max);            }        }    }    public override function dataInvalidated(key:String):void{        if(key === "rsa") {            removeRsaBlinker();			Blinker.removeDoubleObject(analog["mutato"]);            (minMaxVars["rsa.rudderSensorStarboard"] as MinMax).reset((minMaxVars["rsa.rudderSensorStarboard"] as MinMax).unitClass);            setRsaInvalid();        }    }    public override function dataPreInvalidated(key:String):void {        if(key === "rsa") {            Blinker.removeDoubleObject(analog["mutato"]);            Blinker.addObject(analog["mutato"]);            Blinker.addObject(analogi["digi"]["digi_a"]);            Blinker.addObject(digital["digi"]["digi_a"]);            graf.visible = false;        }    }    private function removeRsaBlinker():void {        Blinker.removeObject(analog["mutato"]);        Blinker.removeObject(analogi["digi"]["digi_a"]);        Blinker.removeObject(digital["digi"]["digi_a"]);    }    private function setRsaInvalid():void {        analog["mutato"].visible = false;        graf.visible = false;        if(!(minMaxVars["rsa.rudderSensorStarboard"] as MinMax).reseted) {            analog["min"].visible = true;            analog["max"].visible = true;        } else {		    analog["min"].visible = false;            analog["max"].visible = false;            digital["digimin"]["digi_a"].text = "---";            digital["digimax"]["digi_a"].text = "---";	    }        analogi["digi"]["digi_a"].text = "---";        digital["digi"]["digi_a"].text = "---";        bal.color = _feher;        jobb.color = _feher;        analogBackgroundBatch.render();    }}}